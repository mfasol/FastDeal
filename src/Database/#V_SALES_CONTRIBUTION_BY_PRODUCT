CREATE OR REPLACE FORCE VIEW PUBLIC.V_SALES_CONTRIBUTION_BY_PRODUCT(PRODUCT_KEY, SALES_NUM, TOT_SALES, TOT_MER_COS, TOT_CONT_AFT_MERCH, TOT_COS, TOT_GP, AVG_SALE, AVG_COS, AVG_GP) AS
(SELECT
    PRODUCT_KEY,
    COUNT(ITEM_ID) AS SALES_NUM,
    ROUND(SUM(SALES), 2) AS TOT_SALES,
    ROUND(SUM(MER_COS), 4) AS TOT_MER_COS,
    ROUND(SUM(CONT_AFT_MERCH), 4) AS TOT_CONT_AFT_MERCH,
    ROUND(SUM(COS), 2) AS TOT_COS,
    ROUND(SUM(PROFIT), 2) AS TOT_GP,
    ROUND(AVG(SALES), 2) AS AVG_SALE,
    ROUND(AVG(COS), 2) AS AVG_COS,
    ROUND(AVG(PROFIT), 2) AS AVG_GP
FROM PUBLIC.V_SALES_CONTRIBUTION
    /* SELECT
        SALES_LEDGER.ITEM_ID,
        SALES_LEDGER.PRODUCT_KEY,
        SALES_LEDGER.TRANSACTION_PRICE AS SALES,
        ROUND(SALES_LEDGER.TRANSACTION_ADDITIONAL_COS, 4) AS MER_COS,
        ROUND((SALES_LEDGER.TRANSACTION_PRICE - SALES_LEDGER.TRANSACTION_ADDITIONAL_COS), 4) AS CONT_AFT_MERCH,
        ROUND(INVENTORY_ITEMS_GB_AMAZON.ITEM_COS, 4) AS COS,
        ROUND((SALES_LEDGER.TRANSACTION_PRICE - INVENTORY_ITEMS_GB_AMAZON.ITEM_COS), 4) AS PROFIT
    FROM PUBLIC.SALES_LEDGER
        /++ PUBLIC.SALES_LEDGER.tableScan ++/
        /++ WHERE SALES_LEDGER.TRANSACTION_STATUS = 'SALE'
        ++/
    LEFT OUTER JOIN PUBLIC.INVENTORY_ITEMS_GB_AMAZON
        /++ PUBLIC.INVENTORY_ITEMS_SINGLE_ITEM_UUID_UINDEX: SINGLE_ITEM_UUID = SALES_LEDGER.ITEM_UUID ++/
        ON (SALES_LEDGER.ITEM_ID = INVENTORY_ITEMS_GB_AMAZON.CONCATENATED_PRIMARY_KEY)
        AND (SALES_LEDGER.ITEM_UUID = INVENTORY_ITEMS_GB_AMAZON.SINGLE_ITEM_UUID)
    WHERE SALES_LEDGER.TRANSACTION_STATUS = 'SALE'
     */
GROUP BY PRODUCT_KEY
ORDER BY 2 DESC)
UNION ALL
(SELECT
    'TOTAL',
    COUNT(ITEM_ID) AS SALES_NUM,
    ROUND(SUM(SALES), 2) AS TOT_SALES,
    ROUND(SUM(MER_COS), 4) AS TOT_MER_COS,
    ROUND(SUM(CONT_AFT_MERCH), 4) AS TOT_CONT_AFT_MERCH,
    ROUND(SUM(COS), 2) AS TOT_COS,
    ROUND(SUM(PROFIT), 2) AS TOT_GP,
    ROUND(AVG(SALES), 2) AS AVG_SALE,
    ROUND(AVG(COS), 2) AS AVG_COS,
    ROUND(AVG(PROFIT), 2) AS AVG_GP
FROM PUBLIC.V_SALES_CONTRIBUTION
    /* SELECT
        SALES_LEDGER.ITEM_ID,
        SALES_LEDGER.PRODUCT_KEY,
        SALES_LEDGER.TRANSACTION_PRICE AS SALES,
        ROUND(SALES_LEDGER.TRANSACTION_ADDITIONAL_COS, 4) AS MER_COS,
        ROUND((SALES_LEDGER.TRANSACTION_PRICE - SALES_LEDGER.TRANSACTION_ADDITIONAL_COS), 4) AS CONT_AFT_MERCH,
        ROUND(INVENTORY_ITEMS_GB_AMAZON.ITEM_COS, 4) AS COS,
        ROUND((SALES_LEDGER.TRANSACTION_PRICE - INVENTORY_ITEMS_GB_AMAZON.ITEM_COS), 4) AS PROFIT
    FROM PUBLIC.SALES_LEDGER
        /++ PUBLIC.SALES_LEDGER.tableScan ++/
        /++ WHERE SALES_LEDGER.TRANSACTION_STATUS = 'SALE'
        ++/
    LEFT OUTER JOIN PUBLIC.INVENTORY_ITEMS_GB_AMAZON
        /++ PUBLIC.INVENTORY_ITEMS_SINGLE_ITEM_UUID_UINDEX: SINGLE_ITEM_UUID = SALES_LEDGER.ITEM_UUID ++/
        ON (SALES_LEDGER.ITEM_ID = INVENTORY_ITEMS_GB_AMAZON.CONCATENATED_PRIMARY_KEY)
        AND (SALES_LEDGER.ITEM_UUID = INVENTORY_ITEMS_GB_AMAZON.SINGLE_ITEM_UUID)
    WHERE SALES_LEDGER.TRANSACTION_STATUS = 'SALE'
     */)
