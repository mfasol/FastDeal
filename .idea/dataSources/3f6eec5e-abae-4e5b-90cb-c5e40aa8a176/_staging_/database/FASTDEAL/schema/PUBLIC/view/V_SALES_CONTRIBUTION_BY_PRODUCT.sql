 CREATE FORCE VIEW PUBLIC.V_SALES_CONTRIBUTION_BY_PRODUCT(INVENTORY_KEY, TRANSACTION_NUM, TOT_TRANSACTIONS, TOT_MER_COS, TOT_CONT_AFT_MERCH, TOT_COS, TOT_GP, AVG_SALE, AVG_COS, AVG_GP) AS
(SELECT
    INVENTORY_KEY,
    COUNT(ITEM_ID) AS TRANSACTION_NUM,
    ROUND(SUM(SALES), 2) AS TOT_SALES,
    ROUND(SUM(TOT_FULFIL_COS), 2) AS TOT_MER_COS,
    ROUND(SUM(CONT_AFT_MERCH), 2) AS TOT_CONT_AFT_MERCH,
    ROUND(SUM(COS), 2) AS TOT_COS,
    ROUND(SUM(PROFIT), 2) AS TOT_GP,
    ROUND(AVG(SALES), 2) AS AVG_SALE,
    ROUND(AVG(COS), 2) AS AVG_COS,
    ROUND(AVG(PROFIT), 2) AS AVG_GP
FROM PUBLIC.V_SALES_CONTRIBUTION
    /* SELECT
        SALES_LEDGER.TRANSACTION_DATE,
        SALES_LEDGER.ITEM_ID,
        SALES_LEDGER.PRODUCT_KEY,
        SALES_LEDGER.TRANSACTION_PRICE AS SALES,
        ROUND(SALES_LEDGER.LOGISTIC_ADDITIONAL_COS, 4) AS LOG_COS,
        ROUND(SALES_LEDGER.MERCHANT_CHANNEL_FEES, 4) AS REF_COS,
        ROUND((SALES_LEDGER.LOGISTIC_ADDITIONAL_COS + SALES_LEDGER.MERCHANT_CHANNEL_FEES), 4) AS TOT_FULFIL_COS,
        ROUND(((SALES_LEDGER.TRANSACTION_PRICE - SALES_LEDGER.LOGISTIC_ADDITIONAL_COS) - SALES_LEDGER.MERCHANT_CHANNEL_FEES), 4) AS CONT_AFT_MERCH,
        ROUND(CASE WHEN (SALES_LEDGER.TRANSACTION_STATUS IS NOT 'REFUND') THEN COALESCE((- CONSOLIDATED_INVENTORY.ITEM_COS), 0) ELSE 0 END, 4) AS COS,
        ROUND((((SALES_LEDGER.TRANSACTION_PRICE - SALES_LEDGER.LOGISTIC_ADDITIONAL_COS) - SALES_LEDGER.MERCHANT_CHANNEL_FEES) - ROUND(CASE WHEN (SALES_LEDGER.TRANSACTION_STATUS IS NOT 'REFUND') THEN COALESCE((- CONSOLIDATED_INVENTORY.ITEM_COS), 0) ELSE 0 END, 4)), 4) AS PROFIT,
        SALES_LEDGER.MERCHANT_CHANNEL AS SALES_CHANNEL,
        SALES_LEDGER.MERCHANT_CHANNEL_COUNTRY AS SALES_COUNTRY,
        SALES_LEDGER.LOGISTIC_CHANNEL AS LOGISTIC_CHANNEL,
        SALES_LEDGER.LOGISTIC_CHANNEL_COUNTRY AS LOGISTIC_COUNTRY,
        SALES_LEDGER.TRANSACTION_STATUS AS TYPE,
        SALES_LEDGER.SHIP_COUNTRY AS SHIP_COUNTRY,
        PRODUCT.SELLER_SKU AS INVENTORY_KEY,
        SALES_LEDGER.EXTERNAL_TRANSACTION_ID AS EXT_ID,
        V_SINGLE_SALES_IDENTIFIER.COUNTER AS COUNTER
    FROM PUBLIC.SALES_LEDGER
        /++ PUBLIC.SALES_LEDGER.tableScan ++/
    LEFT OUTER JOIN PUBLIC.CONSOLIDATED_INVENTORY
        /++ (SELECT
            INVENTORY_ITEMS_GB_AMAZON.INTERNAL_INVOICE_REFERENCE_KEY,
            INVENTORY_ITEMS_GB_AMAZON.INTERNAL_INVOICE_REFERENCE_LINE,
            INVENTORY_ITEMS_GB_AMAZON.ITEM_NUMBER,
            INVENTORY_ITEMS_GB_AMAZON.CONCATENATED_PRIMARY_KEY,
            INVENTORY_ITEMS_GB_AMAZON.INVOICE_UUID,
            INVENTORY_ITEMS_GB_AMAZON.INVOICE_LINE_UUID,
            INVENTORY_ITEMS_GB_AMAZON.PRODUCT_KEY,
            INVENTORY_ITEMS_GB_AMAZON.ITEM_COS,
            INVENTORY_ITEMS_GB_AMAZON.SINGLE_ITEM_UUID,
            INVENTORY_ITEMS_GB_AMAZON.ITEM_DATE,
            INVENTORY_ITEMS_GB_AMAZON.INVENTORY_ITEM_STATUS,
            INVENTORY_ITEMS_GB_AMAZON.INVENTORY_ITEM_CURRENCY,
            INVENTORY_ITEMS_GB_AMAZON.INVENTORY_ITEM_STORE_TIMESTAMP,
            INVENTORY_ITEMS_GB_AMAZON.INVENTORY_TRANSACTION_LOCKED,
            INVENTORY_ITEMS_GB_AMAZON.RETURN_COUNTER,
            INVENTORY_ITEMS_GB_AMAZON.TRANSACTION_TYPE,
            INVENTORY_ITEMS_GB_AMAZON.TRANSACTION_UUID
        FROM PUBLIC.INVENTORY_ITEMS_GB_AMAZON
            /++ PUBLIC.INVENTORY_ITEMS_SINGLE_ITEM_UUID_UINDEX: SINGLE_ITEM_UUID IS ?2 ++/
        WHERE (INVENTORY_ITEMS_GB_AMAZON.CONCATENATED_PRIMARY_KEY IS ?1)
            AND (INVENTORY_ITEMS_GB_AMAZON.SINGLE_ITEM_UUID IS ?2))
        UNION
        (SELECT
            INVENTORY_ITEMS_FR_AMAZON.INTERNAL_INVOICE_REFERENCE_KEY,
            INVENTORY_ITEMS_FR_AMAZON.INTERNAL_INVOICE_REFERENCE_LINE,
            INVENTORY_ITEMS_FR_AMAZON.ITEM_NUMBER,
            INVENTORY_ITEMS_FR_AMAZON.CONCATENATED_PRIMARY_KEY,
            INVENTORY_ITEMS_FR_AMAZON.INVOICE_UUID,
            INVENTORY_ITEMS_FR_AMAZON.INVOICE_LINE_UUID,
            INVENTORY_ITEMS_FR_AMAZON.PRODUCT_KEY,
            INVENTORY_ITEMS_FR_AMAZON.ITEM_COS,
            INVENTORY_ITEMS_FR_AMAZON.SINGLE_ITEM_UUID,
            INVENTORY_ITEMS_FR_AMAZON.ITEM_DATE,
            INVENTORY_ITEMS_FR_AMAZON.INVENTORY_ITEM_STATUS,
            INVENTORY_ITEMS_FR_AMAZON.INVENTORY_ITEM_CURRENCY,
            INVENTORY_ITEMS_FR_AMAZON.INVENTORY_ITEM_STORE_TIMESTAMP,
            INVENTORY_ITEMS_FR_AMAZON.INVENTORY_TRANSACTION_LOCKED,
            INVENTORY_ITEMS_FR_AMAZON.RETURN_COUNTER,
            INVENTORY_ITEMS_FR_AMAZON.TRANSACTION_TYPE,
            INVENTORY_ITEMS_FR_AMAZON.TRANSACTION_UUID
        FROM PUBLIC.INVENTORY_ITEMS_FR_AMAZON
            /++ PUBLIC.PRIMARY_KEY_BD: SINGLE_ITEM_UUID IS ?2 ++/
        WHERE (INVENTORY_ITEMS_FR_AMAZON.CONCATENATED_PRIMARY_KEY IS ?1)
            AND (INVENTORY_ITEMS_FR_AMAZON.SINGLE_ITEM_UUID IS ?2)): CONCATENATED_PRIMARY_KEY = SALES_LEDGER.ITEM_ID
            AND SINGLE_ITEM_UUID = SALES_LEDGER.ITEM_UUID
         ++/
        ON (SALES_LEDGER.ITEM_ID = CONSOLIDATED_INVENTORY.CONCATENATED_PRIMARY_KEY)
        AND (SALES_LEDGER.ITEM_UUID = CONSOLIDATED_INVENTORY.SINGLE_ITEM_UUID)
    LEFT OUTER JOIN PUBLIC.PRODUCT
        /++ PUBLIC.PRODUCT_SELLER_SKU_UINDEX: SELLER_SKU = SALES_LEDGER.PRODUCT_KEY ++/
        ON SALES_LEDGER.PRODUCT_KEY = PRODUCT.SELLER_SKU
    LEFT OUTER JOIN PUBLIC.V_SINGLE_SALES_IDENTIFIER
        /++ SELECT
            SALES_LEDGER.EXTERNAL_TRANSACTION_ID AS EXT_ID,
            COUNT(SALES_LEDGER.ITEM_ID) AS COUNTER,
            MAX(SALES_LEDGER.ITEM_ID) AS ITEM_ID
        FROM PUBLIC.SALES_LEDGER
            /++ PUBLIC.SALES_LEDGER.tableScan ++/
        WHERE SALES_LEDGER.EXTERNAL_TRANSACTION_ID IS ?1
        GROUP BY SALES_LEDGER.EXTERNAL_TRANSACTION_ID
        HAVING MAX(SALES_LEDGER.ITEM_ID) IS ?2
        ORDER BY 2 DESC: ITEM_ID = SALES_LEDGER.ITEM_ID
            AND EXT_ID = SALES_LEDGER.EXTERNAL_TRANSACTION_ID
         ++/
        ON (SALES_LEDGER.ITEM_ID = V_SINGLE_SALES_IDENTIFIER.ITEM_ID)
        AND (SALES_LEDGER.EXTERNAL_TRANSACTION_ID = V_SINGLE_SALES_IDENTIFIER.EXT_ID)
     */
GROUP BY INVENTORY_KEY
ORDER BY 2 DESC)
UNION ALL
(SELECT
    'TOTAL',
    COUNT(ITEM_ID) AS TRANSACTION_NUM,
    ROUND(SUM(SALES), 2) AS TOT_SALES,
    ROUND(SUM(TOT_FULFIL_COS), 2) AS TOT_MER_COS,
    ROUND(SUM(CONT_AFT_MERCH), 2) AS TOT_CONT_AFT_MERCH,
    ROUND(SUM(COS), 2) AS TOT_COS,
    ROUND(SUM(PROFIT), 2) AS TOT_GP,
    ROUND(AVG(SALES), 2) AS AVG_SALE,
    ROUND(AVG(COS), 2) AS AVG_COS,
    ROUND(AVG(PROFIT), 2) AS AVG_GP
FROM PUBLIC.V_SALES_CONTRIBUTION
    /* SELECT
        SALES_LEDGER.TRANSACTION_DATE,
        SALES_LEDGER.ITEM_ID,
        SALES_LEDGER.PRODUCT_KEY,
        SALES_LEDGER.TRANSACTION_PRICE AS SALES,
        ROUND(SALES_LEDGER.LOGISTIC_ADDITIONAL_COS, 4) AS LOG_COS,
        ROUND(SALES_LEDGER.MERCHANT_CHANNEL_FEES, 4) AS REF_COS,
        ROUND((SALES_LEDGER.LOGISTIC_ADDITIONAL_COS + SALES_LEDGER.MERCHANT_CHANNEL_FEES), 4) AS TOT_FULFIL_COS,
        ROUND(((SALES_LEDGER.TRANSACTION_PRICE - SALES_LEDGER.LOGISTIC_ADDITIONAL_COS) - SALES_LEDGER.MERCHANT_CHANNEL_FEES), 4) AS CONT_AFT_MERCH,
        ROUND(CASE WHEN (SALES_LEDGER.TRANSACTION_STATUS IS NOT 'REFUND') THEN COALESCE((- CONSOLIDATED_INVENTORY.ITEM_COS), 0) ELSE 0 END, 4) AS COS,
        ROUND((((SALES_LEDGER.TRANSACTION_PRICE - SALES_LEDGER.LOGISTIC_ADDITIONAL_COS) - SALES_LEDGER.MERCHANT_CHANNEL_FEES) - ROUND(CASE WHEN (SALES_LEDGER.TRANSACTION_STATUS IS NOT 'REFUND') THEN COALESCE((- CONSOLIDATED_INVENTORY.ITEM_COS), 0) ELSE 0 END, 4)), 4) AS PROFIT,
        SALES_LEDGER.MERCHANT_CHANNEL AS SALES_CHANNEL,
        SALES_LEDGER.MERCHANT_CHANNEL_COUNTRY AS SALES_COUNTRY,
        SALES_LEDGER.LOGISTIC_CHANNEL AS LOGISTIC_CHANNEL,
        SALES_LEDGER.LOGISTIC_CHANNEL_COUNTRY AS LOGISTIC_COUNTRY,
        SALES_LEDGER.TRANSACTION_STATUS AS TYPE,
        SALES_LEDGER.SHIP_COUNTRY AS SHIP_COUNTRY,
        PRODUCT.SELLER_SKU AS INVENTORY_KEY,
        SALES_LEDGER.EXTERNAL_TRANSACTION_ID AS EXT_ID,
        V_SINGLE_SALES_IDENTIFIER.COUNTER AS COUNTER
    FROM PUBLIC.SALES_LEDGER
        /++ PUBLIC.SALES_LEDGER.tableScan ++/
    LEFT OUTER JOIN PUBLIC.CONSOLIDATED_INVENTORY
        /++ (SELECT
            INVENTORY_ITEMS_GB_AMAZON.INTERNAL_INVOICE_REFERENCE_KEY,
            INVENTORY_ITEMS_GB_AMAZON.INTERNAL_INVOICE_REFERENCE_LINE,
            INVENTORY_ITEMS_GB_AMAZON.ITEM_NUMBER,
            INVENTORY_ITEMS_GB_AMAZON.CONCATENATED_PRIMARY_KEY,
            INVENTORY_ITEMS_GB_AMAZON.INVOICE_UUID,
            INVENTORY_ITEMS_GB_AMAZON.INVOICE_LINE_UUID,
            INVENTORY_ITEMS_GB_AMAZON.PRODUCT_KEY,
            INVENTORY_ITEMS_GB_AMAZON.ITEM_COS,
            INVENTORY_ITEMS_GB_AMAZON.SINGLE_ITEM_UUID,
            INVENTORY_ITEMS_GB_AMAZON.ITEM_DATE,
            INVENTORY_ITEMS_GB_AMAZON.INVENTORY_ITEM_STATUS,
            INVENTORY_ITEMS_GB_AMAZON.INVENTORY_ITEM_CURRENCY,
            INVENTORY_ITEMS_GB_AMAZON.INVENTORY_ITEM_STORE_TIMESTAMP,
            INVENTORY_ITEMS_GB_AMAZON.INVENTORY_TRANSACTION_LOCKED,
            INVENTORY_ITEMS_GB_AMAZON.RETURN_COUNTER,
            INVENTORY_ITEMS_GB_AMAZON.TRANSACTION_TYPE,
            INVENTORY_ITEMS_GB_AMAZON.TRANSACTION_UUID
        FROM PUBLIC.INVENTORY_ITEMS_GB_AMAZON
            /++ PUBLIC.INVENTORY_ITEMS_SINGLE_ITEM_UUID_UINDEX: SINGLE_ITEM_UUID IS ?2 ++/
        WHERE (INVENTORY_ITEMS_GB_AMAZON.CONCATENATED_PRIMARY_KEY IS ?1)
            AND (INVENTORY_ITEMS_GB_AMAZON.SINGLE_ITEM_UUID IS ?2))
        UNION
        (SELECT
            INVENTORY_ITEMS_FR_AMAZON.INTERNAL_INVOICE_REFERENCE_KEY,
            INVENTORY_ITEMS_FR_AMAZON.INTERNAL_INVOICE_REFERENCE_LINE,
            INVENTORY_ITEMS_FR_AMAZON.ITEM_NUMBER,
            INVENTORY_ITEMS_FR_AMAZON.CONCATENATED_PRIMARY_KEY,
            INVENTORY_ITEMS_FR_AMAZON.INVOICE_UUID,
            INVENTORY_ITEMS_FR_AMAZON.INVOICE_LINE_UUID,
            INVENTORY_ITEMS_FR_AMAZON.PRODUCT_KEY,
            INVENTORY_ITEMS_FR_AMAZON.ITEM_COS,
            INVENTORY_ITEMS_FR_AMAZON.SINGLE_ITEM_UUID,
            INVENTORY_ITEMS_FR_AMAZON.ITEM_DATE,
            INVENTORY_ITEMS_FR_AMAZON.INVENTORY_ITEM_STATUS,
            INVENTORY_ITEMS_FR_AMAZON.INVENTORY_ITEM_CURRENCY,
            INVENTORY_ITEMS_FR_AMAZON.INVENTORY_ITEM_STORE_TIMESTAMP,
            INVENTORY_ITEMS_FR_AMAZON.INVENTORY_TRANSACTION_LOCKED,
            INVENTORY_ITEMS_FR_AMAZON.RETURN_COUNTER,
            INVENTORY_ITEMS_FR_AMAZON.TRANSACTION_TYPE,
            INVENTORY_ITEMS_FR_AMAZON.TRANSACTION_UUID
        FROM PUBLIC.INVENTORY_ITEMS_FR_AMAZON
            /++ PUBLIC.PRIMARY_KEY_BD: SINGLE_ITEM_UUID IS ?2 ++/
        WHERE (INVENTORY_ITEMS_FR_AMAZON.CONCATENATED_PRIMARY_KEY IS ?1)
            AND (INVENTORY_ITEMS_FR_AMAZON.SINGLE_ITEM_UUID IS ?2)): CONCATENATED_PRIMARY_KEY = SALES_LEDGER.ITEM_ID
            AND SINGLE_ITEM_UUID = SALES_LEDGER.ITEM_UUID
         ++/
        ON (SALES_LEDGER.ITEM_ID = CONSOLIDATED_INVENTORY.CONCATENATED_PRIMARY_KEY)
        AND (SALES_LEDGER.ITEM_UUID = CONSOLIDATED_INVENTORY.SINGLE_ITEM_UUID)
    LEFT OUTER JOIN PUBLIC.PRODUCT
        /++ PUBLIC.PRODUCT_SELLER_SKU_UINDEX: SELLER_SKU = SALES_LEDGER.PRODUCT_KEY ++/
        ON SALES_LEDGER.PRODUCT_KEY = PRODUCT.SELLER_SKU
    LEFT OUTER JOIN PUBLIC.V_SINGLE_SALES_IDENTIFIER
        /++ SELECT
            SALES_LEDGER.EXTERNAL_TRANSACTION_ID AS EXT_ID,
            COUNT(SALES_LEDGER.ITEM_ID) AS COUNTER,
            MAX(SALES_LEDGER.ITEM_ID) AS ITEM_ID
        FROM PUBLIC.SALES_LEDGER
            /++ PUBLIC.SALES_LEDGER.tableScan ++/
        WHERE SALES_LEDGER.EXTERNAL_TRANSACTION_ID IS ?1
        GROUP BY SALES_LEDGER.EXTERNAL_TRANSACTION_ID
        HAVING MAX(SALES_LEDGER.ITEM_ID) IS ?2
        ORDER BY 2 DESC: ITEM_ID = SALES_LEDGER.ITEM_ID
            AND EXT_ID = SALES_LEDGER.EXTERNAL_TRANSACTION_ID
         ++/
        ON (SALES_LEDGER.ITEM_ID = V_SINGLE_SALES_IDENTIFIER.ITEM_ID)
        AND (SALES_LEDGER.EXTERNAL_TRANSACTION_ID = V_SINGLE_SALES_IDENTIFIER.EXT_ID)
     */)